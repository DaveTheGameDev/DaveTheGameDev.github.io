---
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
    { label: "Home", href: "/" },
    { label: "My Work", href: "/work/" },
    { label: "Blog", href: "/blog/" },
    { label: "Resume", href: "/Resume.pdf" },
];

---

<nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
   <a href="/" class="-m-1.5 p-1.5 inline-flex flex-col">
     <span class="text-zinc-700 dark:text-zinc-300 text-3xl font-bold">David Cauchi</span>
     <span class="text-zinc-700 dark:text-zinc-300 text-lg font-bold">Game Developer</span>
   </a>
   <div class="flex lg:hidden">
     <button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
       <span class="sr-only">Open main menu</span>
       <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
         <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
       </svg>
     </button>
   </div>
   <div class="hidden lg:flex lg:gap-x-12 items-center">
     <ul class="nav-items flex space-x-8 text-lg">
            {
                textLinks.map(({ label, href }) => (
                    <li class="relative">
                        <a
                            aria-current={Astro.url.pathname === href}
                            class:list={[
                                "block py-2 transition-colors duration-200",
                                "hover:text-zinc-950 dark:hover:text-zinc-200",
                                {
                                    "text-zinc-700 dark:text-zinc-300 font-bold": 
                                        Astro.url.pathname === href || (href !== "/" && Astro.url.pathname.startsWith(href)),
                                    "text-zinc-700 dark:text-zinc-400": 
                                        Astro.url.pathname !== href && (href === "/" || !Astro.url.pathname.startsWith(href))
                                },
                            ]}
                            href={href}
                        >
                            {label}
                        </a>
                    </li>
                ))
            }
        </ul>
        <div class="theme-toggle">
            <ThemeToggle />
        </div>
   </div>

 </nav>


<script>
    class MenuButton extends HTMLElement {
        constructor() {
            super();

            // Inject menu toggle button when JS runs.
            this.appendChild(
                this.querySelector("template")!.content.cloneNode(true),
            );
            const btn = this.querySelector("button")!;

            // Hide menu (shown by default to support no-JS browsers).
            const menu = document.getElementById("menu-content")!;
            menu.hidden = true;
            // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
            menu.classList.add("menu-content");

            /** Set whether the menu is currently expanded or collapsed. */
            const setExpanded = (expand: boolean) => {
                btn.setAttribute("aria-expanded", expand ? "true" : "false");
                menu.hidden = !expand;
            };

            // Toggle menu visibility when the menu button is clicked.
            btn.addEventListener("click", () => setExpanded(menu.hidden));

            // Hide menu button for large screens.
            const handleViewports = (
                e: MediaQueryList | MediaQueryListEvent,
            ) => {
                setExpanded(e.matches);
                btn.hidden = e.matches;
            };
            const mediaQueries = window.matchMedia("(min-width: 50em)");
            handleViewports(mediaQueries);
            mediaQueries.addEventListener("change", handleViewports);
        }
    }
    customElements.define("menu-button", MenuButton);
</script>
